AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template per il deployment della pipeline ECS con Fargate

Parameters:
  pGitRepositoryName:
    Type: String
    Description: Nome del repository GitHub
  pGitBranch:
    Type: String
    Description: Branch del repository GitHub da cui effettuare il deploy
  pGitHubToken:
    Type: String
    NoEcho: true
    Description: Token personale di accesso GitHub
  pGitHubOwner:
    Type: String
    Description: Proprietario del repository GitHub

Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource: '*'
  
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-ecs-cluster'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-codebuild-project'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pGitRepositoryName}'
          - Name: KUBECONFIG_AWS_AUTHENTICATOR_CLUSTER_ID
            Value: !Ref EcsCluster
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Starting the build process
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            build:
              commands:
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:latest .
            post_build:
              commands:
                - echo Pushing the Docker image...
                - docker push $REPOSITORY_URI:latest
                - echo Generating imagedefinitions.json file...
                - printf '[{"name":"container-name","imageUri":"%s"}]' $REPOSITORY_URI:latest > imagedefinitions.json
      TimeoutInMinutes: 20

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref pGitRepositoryName

  # Continua dal template precedente...

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${pGitRepositoryName}-task-definition'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !Ref EcsTaskExecutionRole
      ContainerDefinitions:
        -
          Name: container-name
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pGitRepositoryName}:latest'
          PortMappings:
            -
              ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${pGitRepositoryName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the load balancer
      VpcId:
        Fn::ImportValue: "Vpc"
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EcsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: PublicSubnet1
        - Fn::ImportValue: PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application

  EcsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: Vpc
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

  EcsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref EcsTargetGroup
      LoadBalancerArn: !Ref EcsLoadBalancer
      Port: 80
      Protocol: HTTP

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        "EcsCluster"
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: container-name
          ContainerPort: 80
          TargetGroupArn: !Ref EcsTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: "PrivateSubnet1"
            - Fn::ImportValue: "PrivateSubnet2"
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue: "ServiceDiscoveryPrivateNamespaceArn"
      TaskDefinition: !Ref EcsTaskDefinition

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - ecr:GetAuthorizationToken
                  - ecs:DescribeServices
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - sns:Publish
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource: '*'

  EcsCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${pGitRepositoryName}-pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Location: !Sub 'arn:aws:s3:::${ArtifactBucket}'
        Type: S3
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: GithubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref pGitHubOwner
                Repo: !Ref pGitRepositoryName
                Branch: !Ref pGitBranch
                OAuthToken: !Ref pGitHubToken
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceArtifact
        -
          Name: Build
          Actions:
            -
              Name: CodeBuildAction
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildArtifact
        -
          Name: Deploy
          Actions:
            -
              Name: EcsDeployAction
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: "1"
              Configuration:
                FileName: imagedefinitions.json
                TaskDefinitionTemplateArtifact: BuildArtifact
                TaskDefinitionFileName: appspec.yaml
                ClusterName: !Ref EcsCluster
                ServiceName: !Ref EcsService
